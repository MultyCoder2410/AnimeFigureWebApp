// <auto-generated />
using System;
using AnimeFigureWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimeFigureWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230923141523_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimeFigureCategory", b =>
                {
                    b.Property<int>("CategoriesCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("FiguresAnimeFigureId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesCategoryId", "FiguresAnimeFigureId");

                    b.HasIndex("FiguresAnimeFigureId");

                    b.ToTable("AnimeFigureCategory");
                });

            modelBuilder.Entity("AnimeFigureOrigin", b =>
                {
                    b.Property<int>("FiguresAnimeFigureId")
                        .HasColumnType("int");

                    b.Property<int>("OriginsOriginId")
                        .HasColumnType("int");

                    b.HasKey("FiguresAnimeFigureId", "OriginsOriginId");

                    b.HasIndex("OriginsOriginId");

                    b.ToTable("AnimeFigureOrigin");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.AnimeFigure", b =>
                {
                    b.Property<int>("AnimeFigureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimeFigureId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("AnimeFigureId");

                    b.HasIndex("AdminId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("TypeId");

                    b.ToTable("Figures");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<float>("TotalValue")
                        .HasColumnType("real");

                    b.HasKey("CollectionId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Collector", b =>
                {
                    b.Property<int>("CollectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectorId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollectorId");

                    b.HasIndex("AdminId");

                    b.ToTable("Collectors");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Origin", b =>
                {
                    b.Property<int>("OriginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OriginId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OriginId");

                    b.ToTable("Origins");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("FigureAnimeFigureId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerCollectorId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("FigureAnimeFigureId");

                    b.HasIndex("OwnerCollectorId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("CollectionCollector", b =>
                {
                    b.Property<int>("CollectionsCollectionId")
                        .HasColumnType("int");

                    b.Property<int>("CollectorsCollectorId")
                        .HasColumnType("int");

                    b.HasKey("CollectionsCollectionId", "CollectorsCollectorId");

                    b.HasIndex("CollectorsCollectorId");

                    b.ToTable("CollectionCollector");
                });

            modelBuilder.Entity("AnimeFigureCategory", b =>
                {
                    b.HasOne("AnimeFigureWebApp.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeFigureWebApp.Models.AnimeFigure", null)
                        .WithMany()
                        .HasForeignKey("FiguresAnimeFigureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeFigureOrigin", b =>
                {
                    b.HasOne("AnimeFigureWebApp.Models.AnimeFigure", null)
                        .WithMany()
                        .HasForeignKey("FiguresAnimeFigureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeFigureWebApp.Models.Origin", null)
                        .WithMany()
                        .HasForeignKey("OriginsOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.AnimeFigure", b =>
                {
                    b.HasOne("AnimeFigureWebApp.Models.Admin", null)
                        .WithMany("Figures")
                        .HasForeignKey("AdminId");

                    b.HasOne("AnimeFigureWebApp.Models.Brand", "Brand")
                        .WithMany("Figures")
                        .HasForeignKey("BrandId");

                    b.HasOne("AnimeFigureWebApp.Models.Collection", null)
                        .WithMany("Figures")
                        .HasForeignKey("CollectionId");

                    b.HasOne("AnimeFigureWebApp.Models.Type", "Type")
                        .WithMany("Figures")
                        .HasForeignKey("TypeId");

                    b.Navigation("Brand");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Collector", b =>
                {
                    b.HasOne("AnimeFigureWebApp.Models.Admin", null)
                        .WithMany("Collectors")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Review", b =>
                {
                    b.HasOne("AnimeFigureWebApp.Models.AnimeFigure", "Figure")
                        .WithMany("Reviews")
                        .HasForeignKey("FigureAnimeFigureId");

                    b.HasOne("AnimeFigureWebApp.Models.Collector", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerCollectorId");

                    b.Navigation("Figure");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CollectionCollector", b =>
                {
                    b.HasOne("AnimeFigureWebApp.Models.Collection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeFigureWebApp.Models.Collector", null)
                        .WithMany()
                        .HasForeignKey("CollectorsCollectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Admin", b =>
                {
                    b.Navigation("Collectors");

                    b.Navigation("Figures");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.AnimeFigure", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Brand", b =>
                {
                    b.Navigation("Figures");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Collection", b =>
                {
                    b.Navigation("Figures");
                });

            modelBuilder.Entity("AnimeFigureWebApp.Models.Type", b =>
                {
                    b.Navigation("Figures");
                });
#pragma warning restore 612, 618
        }
    }
}
